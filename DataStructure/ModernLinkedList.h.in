#ifndef MODERN_LINKED_LIST_H
#define MODERN_LINKED_LIST_H
#include <algorithm>
#include <iostream>
#include <list>
#include <DataStructure/LinkedList.hpp>
using namespace std;
template <typename Data>
class ModernLinkedList: public LinkedList<Data> {
    public:
        list<Data> dataList;
        // Add methods and members as needed
        void InsertAtHead(Data data) override;
        void Print() override;
        vector<Data> GetAll() override;
        Data* firstOrDefault(function<bool (Data data)> func) override;
        void ForEach(function<void (Data& data)> func) override;
        void RemoveAt(Data* data) override;
};

template <typename Data> 
vector<Data> ModernLinkedList<Data>::GetAll() {
    vector<Data> allData;
    allData.reserve(dataList.size());
    for (auto& item : dataList) {
        allData.push_back(item);
    }
    return allData;
}

template <typename Data>
void ModernLinkedList<Data>::InsertAtHead(Data data)
{
    dataList.push_front(data);
    cout << "Nodo insertado en el head: " << endl << data << endl << endl; 
}

template <typename Data>
void ModernLinkedList<Data>::Print()
{
    for (const auto& item : dataList) {
        cout << item << " " << endl << endl; // Assuming Data has an overloaded operator<<
    }
    cout << endl;
}
template <typename Data>
void ModernLinkedList<Data>::ForEach(function<void(Data& data)> func)
{
    for_each(this->dataList.begin(), this->dataList.end(), func);
}
template <typename Data>
Data *ModernLinkedList<Data>::firstOrDefault(function<bool(Data data)> func)
{
    for (auto it = dataList.begin(); it != dataList.end(); it++) {
        if (func(*it)) {
            return &(*it);
        }
    }
    return nullptr;
}
template <typename Data>
void ModernLinkedList<Data>::RemoveAt(Data *data)
{
    // auto it = find(dataList.begin(), dataList.end(), *data);
    // if(it != dataList->end()){
    //     dataList->erase(it);
    // }
    if(data != dataList->end()){
        dataList->erase(data);
    }
}
#endif

