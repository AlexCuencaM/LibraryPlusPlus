#ifndef MODERN_LINKED_LIST_H
#define MODERN_LINKED_LIST_H
#include <algorithm>
#include <iostream>
#include <list>
#include <DataStructure/LinkedList.hpp>
using namespace std;
template <typename Data>
class ModernLinkedList: public LinkedList<Data> {
    public:
        list<Data> dataList;
        // Add methods and members as needed
        void InsertAtHead(Data data) override;
        void Print() override;
        void Search(Data data) override;
        vector<Data> GetAll() override;
};

template <typename Data> 
vector<Data> ModernLinkedList<Data>::GetAll() {
    vector<Data> allData;
    allData.reserve(dataList.size());
    for (const auto& item : dataList) {
        allData.push_back(item);
    }
    return allData;
}

template <typename Data>
void ModernLinkedList<Data>::InsertAtHead(Data data)
{
    dataList.push_front(data);
    cout << "Inserted at head: " << endl << data << endl << endl; 
}

template <typename Data>
void ModernLinkedList<Data>::Print()
{
    for (const auto& item : dataList) {
        cout << item << " " << endl << endl; // Assuming Data has an overloaded operator<<
    }
    cout << endl;
}
template <typename Data>
void ModernLinkedList<Data>::Search(Data data)
{
    auto it = find(dataList.begin(), dataList.end(), data);
    if (it != dataList.end()) {
        cout << "Found: " << *it << endl;
    } else {
        cout << "Not found: " << data << endl;
    }
}
#endif

