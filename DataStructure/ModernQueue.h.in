#ifndef MODERNQUEUE_HPP
#define MODERNQUEUE_HPP
#include <DataStructure/Queue.hpp>
#include <queue>
using namespace std;
template <typename Data>
class ModernQueue: public Queue<Data> {
    public:
        
        queue<Data> dataQueue; // Using STL queue to manage the data
        void Enqueue(Data data) override; 
        Data Dequeue() override;
        bool IsEmpty() const override;
        // Get all elements in the queue as a vector
        vector <Data> GetAll() override;
        Data GetFrontItem() override;
        void ClearAll() override;
};
template <typename Data>
void ModernQueue<Data>::Enqueue(Data data)
{
    dataQueue.push(data); // Add the data to the end of the queue
}

template <typename Data>
Data ModernQueue<Data>::Dequeue()
{
    Data deletedBook = dataQueue.front(); // Access the front element (optional, can be used for checking)
    dataQueue.pop(); // Remove the front element from the queue
    return deletedBook; // Return the removed element
}

template <typename Data>
vector<Data> ModernQueue<Data>::GetAll()
{
    vector<Data> elements;
    queue<Data> tempQueue = dataQueue; // Create a copy to avoid modifying the original queue
    while (!tempQueue.empty()) {
        elements.push_back(tempQueue.front()); // Add the front element to the vector
        tempQueue.pop(); // Remove the front element from the temporary queue
    }
    return elements; // Return all elements in the queue as a vector
}
#endif

template <typename Data>
bool ModernQueue<Data>::IsEmpty() const
{ 
    return dataQueue.empty();
} // Check if the queue is empty

template <typename Data>
Data ModernQueue<Data>::GetFrontItem()
{
    return dataQueue.front();
}

template <typename Data>
void ModernQueue<Data>::ClearAll()
{
    while (!dataQueue.empty()) {
        dataQueue.pop(); // Remove the front element from the temporary queue
    }
}
